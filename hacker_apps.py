import json


def init_config():
	import json, os.path

	if os.path.exists("DataApp/hacker_apps_config.txt") != True:
		config_dict = {"Tactical camouflage" : 0, "shutdown" : 0, "theft of ETO" : 0, "encryption of inventory" : 0, "encryption of inventory" : 0}
		with open("DataApp/hacker_apps_config.txt", "w+", encoding="utf-8") as file:
			json_string = json.dumps(config_dict)
			file.write(json_string)
			print("\033[32m{}".format("[INFO]: ")+"\033[0m{}".format("Save DEFAULT-HACKER_APPS_CONFIG data!"))
			return config_dict

	with open("DataApp/hacker_apps_config.txt", "r", encoding="utf-8") as file:
		return json.load(file)

# –î–æ–ª–∂–µ–Ω —Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞!
			# –°—á–µ—Ç—á–∏–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤:
config_dict = init_config()

# ["smartphone_consumables", 1000]
def use_consumables(hacker, script_name):
	global config_dict
	try:
		# print(hacker.inventory)
		index = hacker.inventory.index("smartphone_consumables")
		if int(hacker.inventory[index+1]) > 0:
			hacker.inventory[index+1] = hacker.inventory[index+1] - 1
			counter = config_dict[script_name]
			config_dict[script_name] = counter + 1
			return True
		else:
			return False
	except ValueError:
		return False



# APP #1 --------------------------------------------------------------------------
original_npc = None # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π NPC - —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
original_get_instance = None
points_flag = 0

class FAKE_NPC:
	@staticmethod
	def get_instance() -> 'FAKE_NPC':
		global original_npc
		if "_instance" not in FAKE_NPC.__dict__:
			FAKE_NPC._instance = FAKE_NPC(original_npc)
			return FAKE_NPC._instance
		else:
			return FAKE_NPC._instance

	def __init__(self, original_npc):
		self.default_HP = 10000000000000000000000000000000000000000000000000000000000
		self.name = original_npc.name
		self.HP = self.default_HP
		self.armor = 0
		self.damage = original_npc.damage
		self.strong = original_npc.strong
		self.critical_dmg = original_npc.critical_dmg     # % - –º–∞–∫—Å–∏–º—É–º 45%
		self.drop_trophy = original_npc.drop_trophy           # –≠—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π tool_id –ø—Ä–µ–¥–º–µ—Ç–∞.
		self.installed_contender = original_npc.installed_contender

	def print_characteristics(self): # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ –∏ —Ç–∞–º –Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –ù–ê–î–ï–ñ–ù–û
		print("hacked: "+"ñ§Äñ§¢ñ¢âÍòòÍõÉñ£†ñ§¢Íö†ÍöΩñ§¢Íõàñ¶™Íõ§Íòòñ¢âñ§¢ÍõÉ")
		print("HP@: "+"ñ§Äñ§¢ñ¢âÍòòÍõÉñ£†ñ§¢Íö†ÍöΩñ§¢Íõàñ¶™Íõ§Íòòñ¢â")
		print("&rmor: "+"ñ§Äñ§¢ñ¢âÍòòÍõÉñ£†ñ§¢Íö†ÍöΩñ§¢Íõàñ¶™Íõ§Íòòñ¢âñ§¢ÍõÉ")
		print("d?mage: "+"ñ§Äñ§¢ñ¢âÍòòÍõÉñ£†ñ§¢ñ¶™Íõ§Íòòñ¢âñ§¢ÍõÉ")
		print("criti*** dmg: "+"ñ§Äñ§¢ñ¢âÍòòÍõÉñ£†Íö†ÍöΩñ§¢Íõàñ¶™Íõ§Íòòñ¢âñ§¢ÍõÉ")
		print("drop $$$y: "+"ñ§Äñ§¢ñ¢âÍõÉñ£†ñ§¢Íö†ÍöΩñ§¢Íõàñ¶™Íõ§Íòòñ¢âñ§¢ÍõÉ")
	

	def get_all_fields(self): 
		return [self.name, self.HP, self.armor, self.damage, self.strong, self.critical_dmg, self.drop_trophy, self.installed_contender]
	
	def set_all_fields_default(self):
		return


def set_original_get_instance(orig_get_instance):
	global original_get_instance
	from person import NPC
	if NPC.get_instance != FAKE_NPC.get_instance and orig_get_instance != FAKE_NPC.get_instance() and orig_get_instance != None:
		original_get_instance = orig_get_instance


# —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º —Å –≥–ª–∞–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏–≥—Ä—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ —Å–≤–æ—é –∞—Ç–∞–∫—É, –µ—Å–ª–∏ –¥–∞ —Ç–æ –ø–æ–∏–Ω—Ç—ã –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∏–∑–º–µ–Ω—è—Ç—å—Å—è, –∞ –∑–Ω–∞—á–∏—Ç –∫–∞–º—É—Ñ–ª—è–∂ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å:
def check_time_to_disable_camouflage():
		global original_npc, original_get_instance, config_dict, points_flag
		from person import NPC
		if original_npc == None and original_get_instance == None:
			return

		from raiting import read_rank
		current_points = int(read_rank())
		counter = config_dict["Tactical camouflage"]

		# –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
		#print(current_points != points_flag)
		#print(original_get_instance)
		#print(NPC.get_instance)

		fake_npc = FAKE_NPC.get_instance()
		print(fake_npc.installed_contender)
		if counter != 0 and fake_npc.installed_contender == True:
			if current_points != points_flag: # –ø–æ–∏–Ω—Ç—ã –º–µ–Ω—è—é—Ç—Å—è –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
				config_dict["Tactical camouflage"] = 0
				NPC.get_instance = original_get_instance
				#fake_npc.installed_contender = False # –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –µ—Å–ª–∏ —ç—Ç–∞ —Å—Ç—Ä–æ—á–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, —Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω–∞ False —á–µ—Ä–µ–∑ –æ–¥–∏–Ω, –≤—Ä–æ–¥–µ, –æ–±–æ—Ä–æ—Ç —Ü–∏–∫–ª–∞
				fake_npc.HP = fake_npc.default_HP
				print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–º—É—Ñ–ª—è–∂ –æ—Ç–∫–ª—é—á–µ–Ω!"))
				


def script_tactical_camouflage(hacker=None, command="reactivation"):
	# —Ç–µ–∫—É—â–∏–π –≤—Ä–∞–≥ –∫–ª–æ–Ω–∏—Ä—É–µ—Ç —Å–µ–±—è –∏ –Ω–µ –¥–∞—ë—Ç –∏–≥—Ä–æ–∫—É –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω –ø–æ –æ—Ä–∏–≥–µ–Ω–∞–ª—É!
	# –£—Ä–æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–ø–∏—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!
	global original_npc, config_dict, points_flag
	from person import NPC
	from raiting import read_rank
	points_flag = read_rank()
	npc = NPC.get_instance()
	original_npc = npc
	set_original_get_instance(NPC.get_instance)
	if npc.installed_contender == "None":
		print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–û—Ç–º–µ–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–º—É—Ñ–ª—è–∂ - –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!"))
		return

	if command == "activate":
		if use_consumables(hacker, "Tactical camouflage") == True:
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–º—É—Ñ–ª—è–∂ - –∞–∫—Ç–∏–≤–µ–Ω!"))
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞ –Ω–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞!"))
			NPC.get_instance = FAKE_NPC.get_instance
			return
		elif use_consumables(hacker) == False:
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–û—Ç–º–µ–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–º—É—Ñ–ª—è–∂ - –∫–æ–Ω—á–∏–ª—Å—è —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª!"))
			return
	# –¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç, –≤–µ–¥—å –µ–≥–æ —Ä–∞—é–æ—Ç–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞:
	if command == "reactivation":
		print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–º—É—Ñ–ª—è–∂!"))
		NPC.get_instance = FAKE_NPC.get_instance
		

# APP #2 --------------------------------------------------------------------------
def script_shutdown(hacker=None, command="reactivation"):
	# –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –≤—Ä–∞–≥ –æ—Ç–∫–ª—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ se.
	global config_dict
	from smart_electronics import Smart_Electronics
	se = Smart_Electronics.get_instance()

	if command == "activate":
		if use_consumables(hacker, "shutdown") == True and se.name != "":
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ - —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"))
			se.set_all_fields_default()
			counter = config_dict["shutdown"]
			if counter > 0: # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞—Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π, —Ç–æ —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ, —Ç–∞–∫–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è. –°–∞–º —Å–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –ª–∏—à—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –µ–≥–æ –∑–∞–ø—É—Å–∫–µ —Ö–∞–∫–µ—Ä–æ–º.
				config_dict["shutdown"] = counter - 1

			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("smart electronics - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ!"))
			return
		elif use_consumables(hacker, "shutdown") == False:
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–û—Ç–º–µ–Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ - –∫–æ–Ω—á–∏–ª—Å—è —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª!"))
			return
	if command == "reactivation":
		print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ!"))
		se.set_all_fields_default()


# APP #3 --------------------------------------------------------------------------
def script_theft_of_ETO(hacker=None, command="reactivation"):
	# –∫—Ä–∞–∂–∞ ETO
	# —Ç–æ —Å–∫–æ–ª—å–∫–æ —Ö–∞–∫–µ—Ä —É–∫—Ä–∞–¥–µ—Ç ETO –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è —Ö–∞–∫–µ—Ä–∞.
	global config_dict
	from player_profile import Profile, save_data_profile
	prof = Profile.get_instance()
	if command == "activate":
		if use_consumables(hacker, "theft of ETO") == True:
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞: –ö—Ä–∞–∂–∞ ETO –∏–≥—Ä–æ–∫–∞."))
			# —Å—É—Ç—å –ø—Ä–æ—Å—Ç–∞—è, —á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å —Ö–∞–∫–µ—Ä–∞, —Ç–µ–º –±–æ–ª—å—à–µ–π –ø—Ä–æ—Ü–µ–Ω—Ç –±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω –∏–∑ —Å—É–º–º—ã - 5 - 50%, 4 - 40% –∏ —Ç.–¥:
			deductible_percentage = (10 * int(hacker.lvl)) / 100
			deductible_ETO = int(prof.ETO) * deductible_percentage

			if type(prof.ETO) == str: # —è –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Ç–∞–º —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–¥–µ–ª–∞–ª —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ:
				prof.ETO = int(prof.ETO) - int(deductible_ETO)
				prof.ETO = str(prof.ETO)
			else:
				prof.ETO = int(prof.ETO) - int(deductible_ETO)
			print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: –ö—Ä–∞–∂–∞ "+str(deductible_ETO)+" ETO –∏–≥—Ä–æ–∫–∞."))
			save_data_profile() # –¥–∞–∂–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ç–æ —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –¥–∞—Å—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å–∫—Ä–∏–ø—Ç–∞!
			counter = config_dict["theft of ETO"]
			config_dict["theft of ETO"] = counter - 1
	if command == "reactivation":
		# –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!
		return

# APP #4 --------------------------------------------------------------------------
# –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–¥–∞—Ç—å –ø–∞—Ä–æ—á–∫—É —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–≥—Ä–æ–∫—É!
def check_if_the_player_inventory_has_been_encrypted(): # –ø—Ä–∏–º–µ—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—á–∞—é—â–∞—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: –±—ã–ª –ª–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞?
	from player_profile import Profile
	prof = Profile.get_instance()
	inventory = prof.get_tools_id()
	if len(inventory) == 0: # –µ—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç
		return False

	example_tool_id = list(inventory.keys())[0] # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
	if ("RSAWD" in example_tool_id) == False:
		if len(inventory) > 1:
			example_tool_id = list(inventory.values())[1]
			return "RSAWD" in example_tool_id
	
	return "RSAWD" in example_tool_id

def script_encryption_of_inventory(hacker=None, command="reactivation", auto_decrypt_of_inventory=False):
	# —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
	# —Å–Ω—è—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞
	global config_dict
	from cryptography.RSA import encrypt_text, decrypt_text, public_key, private_key
	from player_profile import Profile, save_data_profile
	prof = Profile.get_instance()

	if command == "activate":
		verification_method = None
		if auto_decrypt_of_inventory == False:
			verification_method = lambda: use_consumables(hacker, "encryption of inventory")
		else:
			verification_method = lambda: auto_decrypt_of_inventory

		# —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏, —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
		# —Ç—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è, –±—É–¥—É—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –∏–ª–∏ –∂–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
		if verification_method() == True:
			keep_inventory = prof.get_keep_tool()
			# 1) –°–Ω–∏–º–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏–≥—Ä–æ–∫–∞ –∏ –ø–æ–º–µ—â–∞–µ–º –µ—ë –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:
			if len(keep_inventory) != 0:
				for tool_id in list(keep_inventory.keys()):
					Profile.take_off(tool_id)

			inventory = prof.get_tools_id()
			# 2) –®–∏—Ñ—Ä—É–µ–º –≤—Å–µ tool_id –≤ –∏–Ω–≤–µ–Ω—Ç–æ—Ä–µ, –≤–∫–ª—é—á–∞—è –∏ —Å–Ω—è—Ç—É—é —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É, –Ω–æ price –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ —Ç—Ä–æ–Ω—É—Ç—ã–º:
			if len(inventory) != 0:
				# 3) —Ä–∞—Å—à–∏—Ä–æ–≤—ã–≤–∞–µ–º –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
				for tool_id, price in list(inventory.items()):
					if ("RSAWD" in tool_id) == False: # —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!
						if auto_decrypt_of_inventory == False:
							print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."))
							encrypt_tool_id = str(encrypt_text(tool_id)) # [1233323, 1232311, 9443794] - —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –≤—ã–¥–∞–µ—Ç —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç
							encrypt_tool_id = "RSAWD"+encrypt_tool_id
							prof.del_tools_id(tool_id)
							prof.add_tools_id(encrypt_tool_id, price)

					elif auto_decrypt_of_inventory == True: # —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å:
						print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞: –î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."))
						encrypt_tool_id = tool_id
						while True:
							if "RSAWD" in encrypt_tool_id:
								tool_id = tool_id[5:] # "RSAWD" - —É–¥–∞–ª—è–µ–º —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã
								print("tool_id == "+str(tool_id))
								tool_id = json.loads(tool_id)
								tool_id = decrypt_text(tool_id) # [1233323, 1232311, 9443794] - —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –≤—ã–¥–∞–µ—Ç —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç
								if ("RSAWD" in tool_id) == False:
									decrypt_tool_id = tool_id
									prof.del_tools_id(encrypt_tool_id)
									prof.add_tools_id(decrypt_tool_id, price)
									break
							else: # –µ—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω, —Ç–æ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "RSAWD", —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –±–µ—Ä–µ–º —Å–ª–µ–¥ –∏–Ω—Å—Ä—É–º–µ–Ω—Ç:
								break
				if auto_decrypt_of_inventory == True:
					print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–î–µ—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."))
					return # –æ —Ç–æ–º —á—Ç–æ –±—ã–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞, –≤ config_dict –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º!
				counter = config_dict["encryption of inventory"]
				config_dict["encryption of inventory"] = counter - 1
				print("\033[33m{}".format("[HACKER_APPS]: ")+"\033[0m{}".format("–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."))
	if command == "reactivation":
		# –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!
		return

def auto_decrypt_of_inventory(hacker=None, command="reactivation"):
	# –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–Ω–∏–º–∞–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–æ—Ä—è –∏–≥—Ä–æ–∫–∞.
	# —Å–Ω–∞—á–∞–ª–∞ –º–∞—Å—Å–∏–≤ —Å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫—É –∏ —Å–Ω–æ–≤–∞ —à–∏—Ñ—Ä—É–µ—Ç—Å—è –∏ —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É –∏ —Å–Ω–æ–≤–∞ —à–∏—Ñ—Ä—É–µ—Ç—Å—è..
	# —è –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ –≤—ã–π–¥–µ—Ç, –∑–Ω–∞—á–∏—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —É–¥–∞–ª–∞—Å—å, –∏–Ω–∞—á–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–∫—É
	script_encryption_of_inventory(hacker, command="activate", auto_decrypt_of_inventory=True)

# CONFIGURATION APPS --------------------------------------------------------------------------
all_scripts = ["Tactical camouflage", "shutdown", "theft of ETO", "encryption of inventory"]
scripts_to_script = {"Tactical camouflage" : script_tactical_camouflage, "shutdown" : script_shutdown, "theft of ETO" : script_theft_of_ETO, "encryption of inventory" : script_encryption_of_inventory}

def use_reactivation():
	global config_dict, original_npc
	for script_name, counter in config_dict.items():
		if counter > 0:
			script = scripts_to_script[script_name]
			script()

# SAVE TO CONFIG FILE --------------------------------------------------------------------------
def save_to_config_file():
	global config_dict
	import json
	with open("DataApp/hacker_apps_config.txt", "w+", encoding="utf-8") as file:
		json_string = json.dumps(config_dict)
		file.write(json_string)
		print("\033[32m{}".format("[INFO]: ")+"\033[0m{}".format("Save HACKER_APPS_CONFIG data!"))